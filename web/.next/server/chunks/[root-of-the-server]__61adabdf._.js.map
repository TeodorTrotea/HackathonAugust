{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/teodor/HackathonAugust/web/lib/langchain-agent.ts"],"sourcesContent":["import { ChatOpenAI, OpenAIEmbeddings } from '@langchain/openai'\nimport { MemoryVectorStore } from 'langchain/vectorstores/memory'\nimport { Document } from 'langchain/document'\nimport { RunnableSequence, RunnableLambda } from '@langchain/core/runnables'\nimport { StringOutputParser } from '@langchain/core/output_parsers'\nimport { PromptTemplate } from '@langchain/core/prompts'\nimport { Tool } from '@langchain/core/tools'\nimport { AgentExecutor } from 'langchain/agents'\nimport { createOpenAIToolsAgent } from 'langchain/agents'\nimport { HumanMessage, AIMessage, SystemMessage } from '@langchain/core/messages'\nimport fs from 'fs'\nimport path from 'path'\n\ninterface Event {\n  id: string\n  title: string\n  description: string\n  date: string\n  time: string | null\n  location: string\n  type: string\n  image_url: string\n  registration_url: string\n  tags: string\n  status: string\n}\n\ninterface LangChainResult {\n  message: string\n  events: Event[]\n  relevanceScores: number[]\n  searchQuery: string\n  processingSteps: string[]\n  vectorSimilarityScores: { [key: string]: number }\n}\n\nclass LangChainEventAgent {\n  private llm: ChatOpenAI\n  private embeddings: OpenAIEmbeddings\n  private vectorStore: MemoryVectorStore | null = null\n  private events: Event[] = []\n  private agent: AgentExecutor | null = null\n  private isInitialized = false\n\n  constructor() {\n    this.llm = new ChatOpenAI({\n      modelName: process.env.OPENAI_MODEL || 'gpt-4o-mini',\n      temperature: 0.3,\n      openAIApiKey: process.env.OPENAI_API_KEY,\n    })\n\n    this.embeddings = new OpenAIEmbeddings({\n      openAIApiKey: process.env.OPENAI_API_KEY,\n      modelName: 'text-embedding-3-small'\n    })\n\n    this.initialize()\n  }\n\n  private async initialize() {\n    if (this.isInitialized) return\n\n    console.log('🚀 Initializing LangChain Event Agent...')\n    \n    // Load events from CSV\n    await this.loadEvents()\n    \n    // Create vector store with embeddings\n    await this.createVectorStore()\n    \n    // Set up agent with tools\n    await this.setupAgent()\n    \n    this.isInitialized = true\n    console.log('✅ LangChain Agent initialized successfully')\n  }\n\n  private async loadEvents() {\n    try {\n      const csvPath = path.join(process.cwd(), '../data/events_export.csv')\n      const csvContent = fs.readFileSync(csvPath, 'utf-8')\n      \n      const lines = csvContent.trim().split('\\n')\n      const headers = lines[0].split(',')\n      \n      // More robust CSV parsing\n      this.events = []\n      \n      for (let lineIndex = 1; lineIndex < lines.length; lineIndex++) {\n        try {\n          const line = lines[lineIndex]\n          if (!line || line.trim() === '') continue\n          \n          const values = []\n          let current = ''\n          let inQuotes = false\n          \n          for (let i = 0; i < line.length; i++) {\n            const char = line[i]\n            if (char === '\"') {\n              inQuotes = !inQuotes\n            } else if (char === ',' && !inQuotes) {\n              values.push(current.trim().replace(/^\"|\"$/g, ''))\n              current = ''\n            } else {\n              current += char\n            }\n          }\n          values.push(current.trim().replace(/^\"|\"$/g, ''))\n          \n          // Map values to headers\n          const event: any = {}\n          headers.forEach((header, index) => {\n            const value = values[index] || ''\n            // Clean header names\n            const cleanHeader = header.trim().toLowerCase().replace(/\\s+/g, '_')\n            event[cleanHeader] = value\n          })\n          \n          // Normalize the event structure\n          const normalizedEvent: Event = {\n            id: event.id || `generated-${lineIndex}`,\n            title: event.title || 'Untitled Event',\n            description: event.description || '',\n            date: event.date || '',\n            time: event.time || null,\n            location: event.location || '',\n            type: event.type || 'Event',\n            image_url: event.image_url || '',\n            registration_url: event.registration_url || '',\n            tags: event.tags || '',\n            status: event.status || 'published'\n          }\n          \n          // Validate the event has minimum required fields\n          if (normalizedEvent.title && normalizedEvent.title !== 'Untitled Event') {\n            // Additional validation - skip if title looks like raw data\n            if (!normalizedEvent.title.includes(',') || normalizedEvent.title.length < 100) {\n              this.events.push(normalizedEvent)\n            } else {\n              console.warn(`Skipping event with malformed title at line ${lineIndex + 1}`)\n            }\n          }\n        } catch (error) {\n          console.warn(`Error parsing CSV line ${lineIndex + 1}:`, error)\n        }\n      }\n\n      console.log(`📚 Loaded ${this.events.length} events for LangChain processing`)\n    } catch (error) {\n      console.error('Error loading events:', error)\n      this.events = []\n    }\n  }\n\n  private async createVectorStore() {\n    if (this.events.length === 0) return\n\n    console.log('🔗 Creating vector embeddings for events...')\n\n    // Create documents for vector store, filtering out malformed events\n    const documents = this.events\n      .filter(event => {\n        // Additional validation before creating embeddings\n        if (!event.title || event.title.length > 200) return false\n        if (!event.id) return false\n        // Check if description looks like raw CSV data\n        if (event.description && event.description.includes(',2025-') && event.description.includes('+00')) {\n          console.warn(`Skipping malformed event in vector store: ${event.title}`)\n          return false\n        }\n        return true\n      })\n      .map(event => {\n        // Clean up the content for better embeddings\n        const cleanDescription = event.description && event.description.length < 1000 \n          ? event.description \n          : event.description?.substring(0, 500) + '...'\n          \n        const content = `\nTitle: ${event.title}\nDescription: ${cleanDescription || 'No description available'}\nType: ${event.type || 'Event'}\nLocation: ${event.location || 'TBD'}\nDate: ${event.date || 'TBD'}\nTags: ${event.tags || ''}\n        `.trim()\n\n        return new Document({\n          pageContent: content,\n          metadata: {\n            eventId: event.id,\n            title: event.title.substring(0, 100),\n            type: event.type || 'Event',\n            location: event.location || 'TBD',\n            date: event.date || '',\n            tags: event.tags || ''\n          }\n        })\n      })\n\n    // Create vector store from documents\n    this.vectorStore = await MemoryVectorStore.fromDocuments(\n      documents,\n      this.embeddings\n    )\n\n    console.log(`🎯 Vector store created with ${documents.length} event embeddings`)\n  }\n\n  private async setupAgent() {\n    if (!this.vectorStore) return\n\n    // Create semantic search tool\n    const semanticSearchTool = new Tool({\n      name: 'semantic_event_search',\n      description: `\n        Performs semantic search through tech events database using vector similarity.\n        Input should be a natural language description of what the user is looking for.\n        Returns the most relevant events with similarity scores.\n        Use this tool when the user wants to find events related to specific topics, technologies, or interests.\n      `,\n      func: async (query: string) => {\n        if (!this.vectorStore) return 'Vector store not initialized'\n\n        try {\n          // Perform similarity search\n          const results = await this.vectorStore.similaritySearchWithScore(query, 15)\n          \n          const searchResults = results.map(([doc, score], index) => ({\n            rank: index + 1,\n            eventId: doc.metadata.eventId,\n            title: doc.metadata.title,\n            type: doc.metadata.type,\n            location: doc.metadata.location,\n            date: doc.metadata.date,\n            similarity: Math.round(score * 100) / 100,\n            preview: doc.pageContent.substring(0, 200) + '...'\n          }))\n\n          return JSON.stringify({\n            query,\n            resultsFound: results.length,\n            topResults: searchResults\n          })\n        } catch (error) {\n          return `Search error: ${error}`\n        }\n      }\n    })\n\n    // Create event details tool\n    const getEventDetailsTool = new Tool({\n      name: 'get_event_details',\n      description: `\n        Gets full details for specific events by their IDs.\n        Input should be a comma-separated list of event IDs.\n        Use this after semantic search to get complete information about selected events.\n      `,\n      func: async (eventIds: string) => {\n        const ids = eventIds.split(',').map(id => id.trim())\n        const matchedEvents = this.events.filter(event => ids.includes(event.id))\n        \n        return JSON.stringify({\n          requestedIds: ids,\n          foundEvents: matchedEvents.map(event => ({\n            id: event.id,\n            title: event.title,\n            description: event.description,\n            date: event.date,\n            time: event.time,\n            location: event.location,\n            type: event.type,\n            tags: event.tags,\n            registrationUrl: event.registration_url\n          }))\n        })\n      }\n    })\n\n    // Create agent prompt\n    const prompt = PromptTemplate.fromTemplate(`\nYou are an expert tech events assistant powered by LangChain with semantic search capabilities. \nYour job is to help users find the most relevant tech events in Belgium and Netherlands.\n\nAVAILABLE TOOLS:\n- semantic_event_search: Find events using semantic similarity search\n- get_event_details: Get complete details for specific events\n\nWORKFLOW:\n1. Understand what the user is really looking for (be generous in interpretation)\n2. Use semantic_event_search with a well-crafted query that captures their intent\n3. Analyze the search results and select the most relevant events\n4. Use get_event_details to get full information for the selected events\n5. Present the results with clear explanations of why each event is relevant\n\nGUIDELINES:\n- Be generous with search terms - cast a wide net\n- Look for semantic connections, not just keyword matches\n- Consider related technologies, concepts, and interests\n- Explain why each event is relevant to the user's query\n- Provide actionable recommendations\n- If few results found, try broader search terms\n\nCurrent conversation:\nHuman: {input}\n\n{agent_scratchpad}\n    `)\n\n    // Create agent\n    const agent = await createOpenAIToolsAgent({\n      llm: this.llm,\n      tools: [semanticSearchTool, getEventDetailsTool],\n      prompt,\n    })\n\n    this.agent = new AgentExecutor({\n      agent,\n      tools: [semanticSearchTool, getEventDetailsTool],\n      verbose: true,\n      maxIterations: 5\n    })\n\n    console.log('🤖 LangChain agent with semantic search tools ready')\n  }\n\n  async processQuery(userMessage: string): Promise<LangChainResult> {\n    await this.initialize()\n\n    if (!this.agent) {\n      throw new Error('Agent not initialized')\n    }\n\n    console.log(`🔍 LangChain agent processing: \"${userMessage}\"`)\n    \n    const processingSteps: string[] = []\n    const vectorSimilarityScores: { [key: string]: number } = {}\n\n    try {\n      // Execute the agent\n      processingSteps.push('Agent execution started')\n      const result = await this.agent.invoke({\n        input: userMessage\n      })\n\n      processingSteps.push('Agent execution completed')\n\n      // Parse the agent's response to extract event IDs and search terms\n      const output = result.output\n      let events: Event[] = []\n      let relevanceScores: number[] = []\n\n      // Try to extract event IDs from the agent's intermediate steps\n      if (result.intermediateSteps) {\n        for (const step of result.intermediateSteps) {\n          if (step.action?.tool === 'get_event_details' && step.observation) {\n            try {\n              const parsedObservation = JSON.parse(step.observation)\n              if (parsedObservation.foundEvents) {\n                // Use a Map to deduplicate events\n                const uniqueEventsMap = new Map<string, Event>()\n                \n                parsedObservation.foundEvents.forEach((eventData: any) => {\n                  try {\n                    // Find the original event for complete data\n                    const originalEvent = this.events.find(e => e.id === eventData.id)\n                    if (!originalEvent) {\n                      console.warn(`Original event not found for ID: ${eventData.id}`)\n                      return\n                    }\n\n                    const processedEvent = {\n                      id: originalEvent.id || `generated-${Date.now()}-${Math.random()}`,\n                      title: String(originalEvent.title || '').trim(),\n                      description: String(originalEvent.description || '').trim(),\n                      date: String(originalEvent.date || ''),\n                      time: originalEvent.time || null,\n                      location: String(originalEvent.location || '').trim(),\n                      type: String(originalEvent.type || '').trim(),\n                      image_url: String(originalEvent.image_url || '').trim(),\n                      registration_url: String(originalEvent.registration_url || '').trim(),\n                      tags: String(originalEvent.tags || '').trim(),\n                      status: 'published'\n                    }\n                    \n                    // Only add if we have a valid title and it's not a duplicate\n                    if (processedEvent.title) {\n                      const uniqueKey = `${processedEvent.id}-${processedEvent.title.substring(0, 50)}`\n                      if (!uniqueEventsMap.has(uniqueKey)) {\n                        uniqueEventsMap.set(uniqueKey, processedEvent)\n                      }\n                    }\n                  } catch (error) {\n                    console.error(`Error processing event data:`, error)\n                  }\n                })\n                \n                events = Array.from(uniqueEventsMap.values())\n                processingSteps.push(`Retrieved details for ${events.length} events`)\n              }\n            } catch (e) {\n              console.error('Error parsing event details:', e)\n            }\n          }\n\n          if (step.action?.tool === 'semantic_event_search' && step.observation) {\n            try {\n              const searchResult = JSON.parse(step.observation)\n              if (searchResult.topResults) {\n                searchResult.topResults.forEach((result: any) => {\n                  vectorSimilarityScores[result.eventId] = result.similarity\n                })\n                relevanceScores = searchResult.topResults.map((r: any) => r.similarity)\n                processingSteps.push(`Semantic search found ${searchResult.resultsFound} results`)\n              }\n            } catch (e) {\n              console.error('Error parsing search results:', e)\n            }\n          }\n        }\n      }\n\n      // If we didn't get events from the agent steps, try a fallback search\n      if (events.length === 0 && this.vectorStore) {\n        processingSteps.push('Performing fallback semantic search')\n        const fallbackResults = await this.vectorStore.similaritySearchWithScore(userMessage, 20)\n        \n        // Use a Map to prevent duplicates based on event ID\n        const uniqueEventsMap = new Map<string, Event>()\n        \n        fallbackResults.forEach(([doc]) => {\n          const eventId = doc.metadata.eventId\n          const event = this.events.find(e => e.id === eventId)\n          \n          if (event && event.title && typeof event.title === 'string' && event.title.trim()) {\n            // Use a composite key to prevent duplicates\n            const uniqueKey = `${event.id || 'no-id'}-${event.title.substring(0, 50)}`\n            if (!uniqueEventsMap.has(uniqueKey)) {\n              uniqueEventsMap.set(uniqueKey, {\n                ...event,\n                id: event.id || `generated-${Date.now()}-${Math.random()}`\n              })\n            }\n          }\n        })\n        \n        events = Array.from(uniqueEventsMap.values()).slice(0, 12)\n        relevanceScores = fallbackResults.slice(0, events.length).map(([, score]) => score)\n        \n        events.forEach((event, idx) => {\n          if (fallbackResults[idx]) {\n            vectorSimilarityScores[event.id] = fallbackResults[idx][1]\n          }\n        })\n      }\n\n      return {\n        message: output,\n        events,\n        relevanceScores,\n        searchQuery: userMessage,\n        processingSteps,\n        vectorSimilarityScores\n      }\n\n    } catch (error) {\n      console.error('LangChain agent error:', error)\n      processingSteps.push(`Error: ${error}`)\n\n      // Fallback to direct semantic search\n      if (this.vectorStore) {\n        processingSteps.push('Using direct semantic search fallback')\n        const fallbackResults = await this.vectorStore.similaritySearchWithScore(userMessage, 8)\n        const events = fallbackResults.map(([doc]) => {\n          const eventId = doc.metadata.eventId\n          return this.events.find(e => e.id === eventId)!\n        }).filter(Boolean)\n\n        return {\n          message: `I found ${events.length} relevant events using semantic search, though I encountered an issue with the full analysis.`,\n          events,\n          relevanceScores: fallbackResults.map(([, score]) => score),\n          searchQuery: userMessage,\n          processingSteps,\n          vectorSimilarityScores: {}\n        }\n      }\n\n      throw error\n    }\n  }\n}\n\nexport default LangChainEventAgent"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":["file:///Users/teodor/HackathonAugust/web/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport LangChainEventAgent from '@/lib/langchain-agent'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { message, conversationHistory } = await request.json()\n    \n    if (!message || typeof message !== 'string') {\n      return NextResponse.json({\n        response: \"Please provide a valid message.\",\n        events: [],\n        processingSteps: [],\n        vectorSimilarityScores: {},\n        error: \"Invalid input\"\n      }, { status: 400 })\n    }\n\n    // Check if OpenAI API key is configured\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json({\n        response: \"OpenAI API key is not configured. Please add OPENAI_API_KEY to your .env file.\",\n        events: [],\n        processingSteps: [],\n        vectorSimilarityScores: {},\n        error: \"Missing API key\"\n      }, { status: 500 })\n    }\n\n    console.log(`🔗 LangChain chat processing: \"${message}\"`)\n    const startTime = Date.now()\n    \n    // Use LangChain agent exclusively\n    const agent = new LangChainEventAgent()\n    const result = await agent.processQuery(message)\n    \n    const processingTime = Date.now() - startTime\n    \n    console.log(`🎯 LangChain processing complete:`)\n    console.log(`   - Events found: ${result.events.length}`)\n    console.log(`   - Processing steps: ${result.processingSteps.length}`)\n    console.log(`   - Total time: ${processingTime}ms`)\n    \n    return NextResponse.json({\n      response: result.message,\n      events: result.events,\n      relevanceScores: result.relevanceScores,\n      searchQuery: result.searchQuery,\n      processingSteps: result.processingSteps,\n      vectorSimilarityScores: result.vectorSimilarityScores,\n      processingTime,\n      agentType: 'langchain'\n    })\n    \n  } catch (error) {\n    console.error('LangChain chat API error:', error)\n    return NextResponse.json({\n      response: \"I encountered an error while processing your request with LangChain. Please try again.\",\n      events: [],\n      processingSteps: [`Error: ${error instanceof Error ? error.message : 'Unknown error'}`],\n      vectorSimilarityScores: {},\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,mBAAmB,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE3D,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;YAC3C,OAAO,uJAAY,CAAC,IAAI,CAAC;gBACvB,UAAU;gBACV,QAAQ,EAAE;gBACV,iBAAiB,EAAE;gBACnB,wBAAwB,CAAC;gBACzB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,wCAAwC;QACxC,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,OAAO,uJAAY,CAAC,IAAI,CAAC;gBACvB,UAAU;gBACV,QAAQ,EAAE;gBACV,iBAAiB,EAAE;gBACnB,wBAAwB,CAAC;gBACzB,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC;QACxD,MAAM,YAAY,KAAK,GAAG;QAE1B,kCAAkC;QAClC,MAAM,QAAQ,IAAI,6IAAmB;QACrC,MAAM,SAAS,MAAM,MAAM,YAAY,CAAC;QAExC,MAAM,iBAAiB,KAAK,GAAG,KAAK;QAEpC,QAAQ,GAAG,CAAC,CAAC,iCAAiC,CAAC;QAC/C,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,OAAO,MAAM,CAAC,MAAM,EAAE;QACxD,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,OAAO,eAAe,CAAC,MAAM,EAAE;QACrE,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,eAAe,EAAE,CAAC;QAElD,OAAO,uJAAY,CAAC,IAAI,CAAC;YACvB,UAAU,OAAO,OAAO;YACxB,QAAQ,OAAO,MAAM;YACrB,iBAAiB,OAAO,eAAe;YACvC,aAAa,OAAO,WAAW;YAC/B,iBAAiB,OAAO,eAAe;YACvC,wBAAwB,OAAO,sBAAsB;YACrD;YACA,WAAW;QACb;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,uJAAY,CAAC,IAAI,CAAC;YACvB,UAAU;YACV,QAAQ,EAAE;YACV,iBAAiB;gBAAC,CAAC,OAAO,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;aAAC;YACvF,wBAAwB,CAAC;YACzB,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}