{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/teodor/HackathonAugust/web/lib/smart-agent.ts"],"sourcesContent":["import OpenAI from 'openai'\nimport fs from 'fs'\nimport path from 'path'\n\ninterface Event {\n  id: string\n  title: string\n  description: string\n  date: string\n  time: string | null\n  location: string\n  type: string\n  image_url: string\n  registration_url: string\n  tags: string\n  status: string\n}\n\ninterface UserIntent {\n  primaryRequest: string\n  preferences: {\n    timeframe?: string\n    location?: string\n    eventTypes?: string[]\n    skillLevel?: string\n    format?: string\n    cost?: string\n    company?: string\n    technology?: string[]\n    interests?: string[]\n  }\n  constraints: {\n    mustHave?: string[]\n    mustNotHave?: string[]\n    dateRange?: { start?: string, end?: string }\n    maxResults?: number\n  }\n  sentiment: 'enthusiastic' | 'specific' | 'exploring' | 'urgent'\n}\n\ninterface EvaluatedEvent {\n  event: Event\n  relevanceScore: number\n  reasons: string[]\n  concerns: string[]\n}\n\ninterface AgentResponse {\n  message: string\n  events: Event[]\n  reasoning: string\n  totalEvaluated: number\n}\n\nclass SmartEventAgent {\n  private openai: OpenAI\n  private events: Event[] = []\n  private defaultModel: string\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY\n    })\n    this.defaultModel = process.env.OPENAI_MODEL || 'gpt-4o-mini'\n    this.loadEvents()\n  }\n\n  private getModel(task?: 'intent' | 'evaluation' | 'response'): string {\n    // Allow different models for different tasks\n    if (task === 'intent' && process.env.OPENAI_MODEL_INTENT) {\n      return process.env.OPENAI_MODEL_INTENT\n    }\n    if (task === 'evaluation' && process.env.OPENAI_MODEL_EVALUATION) {\n      return process.env.OPENAI_MODEL_EVALUATION\n    }\n    if (task === 'response' && process.env.OPENAI_MODEL_RESPONSE) {\n      return process.env.OPENAI_MODEL_RESPONSE\n    }\n    \n    // Fall back to default model\n    return this.defaultModel\n  }\n\n  private loadEvents() {\n    try {\n      const csvPath = path.join(process.cwd(), '../data/events_export.csv')\n      const csvContent = fs.readFileSync(csvPath, 'utf-8')\n      \n      const lines = csvContent.trim().split('\\n')\n      const headers = lines[0].split(',')\n      \n      this.events = lines.slice(1).map(line => {\n        const values = []\n        let current = ''\n        let inQuotes = false\n        \n        for (let i = 0; i < line.length; i++) {\n          const char = line[i]\n          if (char === '\"') {\n            inQuotes = !inQuotes\n          } else if (char === ',' && !inQuotes) {\n            values.push(current.trim().replace(/^\"|\"$/g, ''))\n            current = ''\n          } else {\n            current += char\n          }\n        }\n        values.push(current.trim().replace(/^\"|\"$/g, ''))\n\n        const event: any = {}\n        headers.forEach((header, index) => {\n          event[header] = values[index] || ''\n        })\n        \n        return event\n      }) as Event[]\n    } catch (error) {\n      console.error('Failed to load events:', error)\n    }\n  }\n\n  private async interpretUserIntent(userMessage: string, conversationHistory: any[] = []): Promise<UserIntent> {\n    const conversationContext = conversationHistory.length > 0 ?\n      `Previous conversation:\\n${conversationHistory.slice(-6).map((msg) => \n        `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`\n      ).join('\\n')}\\n\\n` : ''\n\n    const systemPrompt = `You are an expert at understanding user intent for tech event searches. Analyze the user's request deeply and extract their true intent, preferences, and constraints.\n\n${conversationContext}Current user message: \"${userMessage}\"\n\nExtract and infer:\n1. PRIMARY REQUEST: What they really want (not just keywords)\n2. PREFERENCES: What they'd prefer but isn't mandatory\n3. CONSTRAINTS: Hard requirements that must be met\n4. SENTIMENT: How they're approaching the search\n\nExamples of deep interpretation:\n- \"I'm new to machine learning\" → skillLevel: beginner, interests: [learning, fundamentals]\n- \"Something this weekend\" → timeframe: this_weekend, dateRange\n- \"Not too corporate\" → mustNotHave: [corporate], format: informal\n- \"I work with Python\" → technology: [python], interests: [python-related]\n- \"Free events only\" → cost: free\n- \"Something hands-on\" → format: workshop, preferences: [practical, interactive]\n- \"I'm between jobs\" → cost: free, interests: [networking, career]\n- \"Quick overview\" → format: short, timeframe: brief\n- \"Deep dive\" → format: detailed, skillLevel: advanced`\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: this.getModel('intent'),\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: `Analyze this request: \"${userMessage}\"` }\n        ],\n        tools: [\n          {\n            type: 'function',\n            function: {\n              name: 'extract_user_intent',\n              description: 'Extract detailed user intent from natural language',\n              parameters: {\n                type: 'object',\n                properties: {\n                  primaryRequest: { type: 'string' },\n                  preferences: {\n                    type: 'object',\n                    properties: {\n                      timeframe: { type: 'string' },\n                      location: { type: 'string' },\n                      eventTypes: { type: 'array', items: { type: 'string' } },\n                      skillLevel: { type: 'string' },\n                      format: { type: 'string' },\n                      cost: { type: 'string' },\n                      company: { type: 'string' },\n                      technology: { type: 'array', items: { type: 'string' } },\n                      interests: { type: 'array', items: { type: 'string' } }\n                    }\n                  },\n                  constraints: {\n                    type: 'object',\n                    properties: {\n                      mustHave: { type: 'array', items: { type: 'string' } },\n                      mustNotHave: { type: 'array', items: { type: 'string' } },\n                      dateRange: {\n                        type: 'object',\n                        properties: {\n                          start: { type: 'string' },\n                          end: { type: 'string' }\n                        }\n                      },\n                      maxResults: { type: 'number' }\n                    }\n                  },\n                  sentiment: {\n                    type: 'string',\n                    enum: ['enthusiastic', 'specific', 'exploring', 'urgent']\n                  }\n                },\n                required: ['primaryRequest', 'preferences', 'constraints', 'sentiment']\n              }\n            }\n          }\n        ],\n        tool_choice: { type: 'function', function: { name: 'extract_user_intent' } }\n      })\n\n      const toolCall = response.choices[0].message.tool_calls?.[0]\n      if (toolCall && toolCall.function.arguments) {\n        return JSON.parse(toolCall.function.arguments) as UserIntent\n      }\n    } catch (error) {\n      console.error('Error interpreting user intent:', error)\n    }\n\n    // Fallback intent\n    return {\n      primaryRequest: userMessage,\n      preferences: {},\n      constraints: {},\n      sentiment: 'exploring'\n    }\n  }\n\n  private basicFilter(intent: UserIntent): Event[] {\n    let filteredEvents = this.events\n\n    // Apply hard constraints first\n    if (intent.preferences.location) {\n      filteredEvents = filteredEvents.filter(event =>\n        event.location.toLowerCase().includes(intent.preferences.location!.toLowerCase())\n      )\n    }\n\n    // Date filtering with intelligent interpretation\n    if (intent.preferences.timeframe || intent.constraints.dateRange?.start || intent.constraints.dateRange?.end) {\n      filteredEvents = filteredEvents.filter(event => {\n        const eventDate = new Date(event.date)\n        const now = new Date()\n        \n        // Handle relative timeframes\n        if (intent.preferences.timeframe) {\n          const timeframe = intent.preferences.timeframe.toLowerCase()\n          if (timeframe.includes('weekend') || timeframe.includes('this weekend')) {\n            const nextSaturday = new Date(now)\n            nextSaturday.setDate(now.getDate() + (6 - now.getDay()))\n            const nextSunday = new Date(nextSaturday)\n            nextSunday.setDate(nextSaturday.getDate() + 1)\n            return eventDate >= nextSaturday && eventDate <= nextSunday\n          } else if (timeframe.includes('week') || timeframe.includes('this week')) {\n            const weekEnd = new Date(now)\n            weekEnd.setDate(now.getDate() + 7)\n            return eventDate >= now && eventDate <= weekEnd\n          } else if (timeframe.includes('month') || timeframe.includes('this month')) {\n            const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0)\n            return eventDate >= now && eventDate <= monthEnd\n          } else if (timeframe.includes('soon') || timeframe.includes('upcoming')) {\n            const twoWeeks = new Date(now)\n            twoWeeks.setDate(now.getDate() + 14)\n            return eventDate >= now && eventDate <= twoWeeks\n          }\n        }\n        \n        // Handle explicit date ranges\n        const start = intent.constraints.dateRange?.start ? new Date(intent.constraints.dateRange.start) : new Date('2000-01-01')\n        const end = intent.constraints.dateRange?.end ? new Date(intent.constraints.dateRange.end) : new Date('2030-12-31')\n        return eventDate >= start && eventDate <= end\n      })\n    }\n\n    // Cost filtering (if we can infer from description)\n    if (intent.preferences.cost === 'free') {\n      filteredEvents = filteredEvents.filter(event =>\n        event.description.toLowerCase().includes('free') ||\n        event.tags.toLowerCase().includes('free') ||\n        event.registration_url.includes('free')\n      )\n    }\n\n    // Basic keyword filtering for must-haves\n    if (intent.constraints.mustHave && intent.constraints.mustHave.length > 0) {\n      filteredEvents = filteredEvents.filter(event => {\n        const searchableText = `${event.title} ${event.description} ${event.tags} ${event.type}`.toLowerCase()\n        return intent.constraints.mustHave!.some(mustHave =>\n          searchableText.includes(mustHave.toLowerCase())\n        )\n      })\n    }\n\n    // Filter out must-not-haves\n    if (intent.constraints.mustNotHave && intent.constraints.mustNotHave.length > 0) {\n      filteredEvents = filteredEvents.filter(event => {\n        const searchableText = `${event.title} ${event.description} ${event.tags} ${event.type}`.toLowerCase()\n        return !intent.constraints.mustNotHave!.some(mustNotHave =>\n          searchableText.includes(mustNotHave.toLowerCase())\n        )\n      })\n    }\n\n    return filteredEvents\n  }\n\n  private async evaluateEventsBatch(events: Event[], intent: UserIntent, batchSize: number = 10): Promise<EvaluatedEvent[]> {\n    const evaluatedEvents: EvaluatedEvent[] = []\n    \n    for (let i = 0; i < events.length; i += batchSize) {\n      const batch = events.slice(i, i + batchSize)\n      console.log(`🔍 Evaluating batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(events.length/batchSize)} (${batch.length} events)`)\n      \n      try {\n        const batchEvaluation = await this.evaluateSingleBatch(batch, intent)\n        evaluatedEvents.push(...batchEvaluation)\n        \n        // Small delay to avoid rate limits\n        if (i + batchSize < events.length) {\n          await new Promise(resolve => setTimeout(resolve, 500))\n        }\n      } catch (error) {\n        console.error(`Error evaluating batch ${i}-${i+batchSize}:`, error)\n        // Continue with next batch\n      }\n    }\n\n    return evaluatedEvents\n  }\n\n  private async evaluateSingleBatch(events: Event[], intent: UserIntent): Promise<EvaluatedEvent[]> {\n    const eventsText = events.map((event, idx) => \n      `Event ${idx + 1}:\nTitle: ${event.title}\nDescription: ${event.description.substring(0, 300)}${event.description.length > 300 ? '...' : ''}\nDate: ${event.date} ${event.time || ''}\nLocation: ${event.location}\nType: ${event.type}\nTags: ${event.tags}`\n    ).join('\\n\\n')\n\n    const systemPrompt = `You are an expert event curator. Evaluate these events against the user's specific intent and preferences.\n\nUser Intent Analysis:\n- Primary Request: ${intent.primaryRequest}\n- Preferences: ${JSON.stringify(intent.preferences, null, 2)}\n- Constraints: ${JSON.stringify(intent.constraints, null, 2)}\n- Sentiment: ${intent.sentiment}\n\nFor each event, provide:\n1. Relevance score (0-100): How well it matches the user's intent\n2. Reasons: Why this event is relevant (be specific)\n3. Concerns: Any potential issues or mismatches\n\nFocus on deeper meaning, not just keyword matching. Consider:\n- User's skill level and learning goals\n- Practical vs theoretical preferences\n- Networking vs learning focus\n- Time constraints and availability\n- Career stage and objectives\n- Technical depth desired`\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: this.getModel('evaluation'),\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: `Evaluate these events:\\n\\n${eventsText}` }\n        ],\n        tools: [\n          {\n            type: 'function',\n            function: {\n              name: 'evaluate_events',\n              description: 'Evaluate events against user intent',\n              parameters: {\n                type: 'object',\n                properties: {\n                  evaluations: {\n                    type: 'array',\n                    items: {\n                      type: 'object',\n                      properties: {\n                        eventIndex: { type: 'number' },\n                        relevanceScore: { type: 'number', minimum: 0, maximum: 100 },\n                        reasons: { type: 'array', items: { type: 'string' } },\n                        concerns: { type: 'array', items: { type: 'string' } }\n                      },\n                      required: ['eventIndex', 'relevanceScore', 'reasons', 'concerns']\n                    }\n                  }\n                },\n                required: ['evaluations']\n              }\n            }\n          }\n        ],\n        tool_choice: { type: 'function', function: { name: 'evaluate_events' } }\n      })\n\n      const toolCall = response.choices[0].message.tool_calls?.[0]\n      if (toolCall && toolCall.function.arguments) {\n        const result = JSON.parse(toolCall.function.arguments)\n        return result.evaluations.map((evaluation: any) => ({\n          event: events[evaluation.eventIndex],\n          relevanceScore: evaluation.relevanceScore,\n          reasons: evaluation.reasons,\n          concerns: evaluation.concerns\n        }))\n      }\n    } catch (error) {\n      console.error('Error in batch evaluation:', error)\n    }\n\n    // Fallback: return all events with medium scores\n    return events.map(event => ({\n      event,\n      relevanceScore: 50,\n      reasons: ['Basic match'],\n      concerns: []\n    }))\n  }\n\n  async processQuery(userMessage: string, conversationHistory: any[] = []): Promise<AgentResponse> {\n    console.log(`🧠 Smart Agent analyzing: \"${userMessage}\"`)\n\n    // Step 1: Deep intent interpretation\n    const intent = await this.interpretUserIntent(userMessage, conversationHistory)\n    console.log(`🎯 Interpreted intent:`, intent)\n\n    // Step 2: Basic filtering based on hard constraints\n    const basicFiltered = this.basicFilter(intent)\n    console.log(`📊 After basic filtering: ${basicFiltered.length} events`)\n\n    // Step 3: LLM evaluation in batches\n    const evaluatedEvents = await this.evaluateEventsBatch(basicFiltered, intent, 10)\n    console.log(`✅ Evaluated ${evaluatedEvents.length} events`)\n\n    // Step 4: Sort by relevance and take top results\n    const sortedEvents = evaluatedEvents\n      .filter(e => e.relevanceScore >= 30) // Only keep reasonably relevant events\n      .sort((a, b) => b.relevanceScore - a.relevanceScore)\n      .slice(0, 5)\n\n    console.log(`🏆 Final results: ${sortedEvents.length} events`)\n\n    // Step 5: Generate intelligent response\n    const finalResponse = await this.generateSmartResponse(\n      userMessage, \n      intent, \n      sortedEvents, \n      evaluatedEvents.length,\n      conversationHistory\n    )\n\n    return {\n      message: finalResponse,\n      events: sortedEvents.map(e => e.event),\n      reasoning: `Analyzed ${evaluatedEvents.length} events, found ${sortedEvents.length} highly relevant matches`,\n      totalEvaluated: evaluatedEvents.length\n    }\n  }\n\n  private async generateSmartResponse(\n    userMessage: string, \n    intent: UserIntent, \n    evaluatedEvents: EvaluatedEvent[], \n    totalEvaluated: number,\n    conversationHistory: any[]\n  ): Promise<string> {\n    const conversationContext = conversationHistory.length > 0 ?\n      `Previous conversation:\\n${conversationHistory.slice(-4).map((msg) => \n        `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`\n      ).join('\\n')}\\n\\n` : ''\n\n    const eventSummaries = evaluatedEvents\n      .filter(e => e && e.event && e.event.title) // Safety check\n      .map((e, i) => \n        `${i + 1}. ${e.event.title} (Score: ${e.relevanceScore})\\n   Why: ${e.reasons.join(', ')}`\n      ).join('\\n')\n\n    const systemPrompt = `You are a knowledgeable AI assistant that deeply understands user intent and has intelligently analyzed events.\n\n${conversationContext}User's original request: \"${userMessage}\"\n\nInterpreted intent:\n- Primary need: ${intent.primaryRequest}\n- Key preferences: ${JSON.stringify(intent.preferences)}\n- User sentiment: ${intent.sentiment}\n\nAnalysis results:\n- Total events evaluated: ${totalEvaluated}\n- Top matches found: ${evaluatedEvents.length}\n\nSelected events:\n${eventSummaries}\n\nGenerate a natural, conversational response that:\n1. Shows you understood their deeper intent (not just keywords)\n2. Explains why these specific events match what they're looking for\n3. Addresses their skill level, interests, and constraints\n4. Builds on the conversation context\n5. Is enthusiastic but honest about the matches`\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: this.getModel('response'),\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: `Generate response for: \"${userMessage}\"` }\n        ]\n      })\n\n      return response.choices[0].message.content || \n        `I analyzed ${totalEvaluated} events and found ${evaluatedEvents.length} that really match what you're looking for!`\n    } catch (error) {\n      console.error('Error generating smart response:', error)\n      return `I analyzed ${totalEvaluated} events and found ${evaluatedEvents.length} that match your interests!`\n    }\n  }\n}\n\nexport default SmartEventAgent"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 643, "column": 0}, "map": {"version":3,"sources":["file:///Users/teodor/HackathonAugust/web/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport SmartEventAgent from '@/lib/smart-agent'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { message, conversationHistory } = await request.json()\n    \n    if (!message || typeof message !== 'string') {\n      return NextResponse.json({\n        response: \"Please provide a valid message.\",\n        events: []\n      }, { status: 400 })\n    }\n\n    // Check if OpenAI API key is configured\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json({\n        response: \"OpenAI API key is not configured. Please add OPENAI_API_KEY to your .env file.\",\n        events: []\n      }, { status: 500 })\n    }\n\n    // Validate AI model configuration\n    const validModels = ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo']\n    const configuredModel = process.env.OPENAI_MODEL || 'gpt-4o-mini'\n    \n    if (!validModels.includes(configuredModel)) {\n      console.warn(`Warning: Configured model '${configuredModel}' is not in the list of known valid models. Proceeding anyway.`)\n    }\n    \n    // Create smart agent with deep interpretation and LLM evaluation\n    const agent = new SmartEventAgent()\n    const result = await agent.processQuery(message, conversationHistory || [])\n    \n    return NextResponse.json({\n      response: result.message,\n      events: result.events\n    })\n    \n  } catch (error) {\n    console.error('Chat API error:', error)\n    return NextResponse.json({\n      response: \"I'm sorry, I encountered an error while processing your request. Please try again.\",\n      events: []\n    }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,mBAAmB,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE3D,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;YAC3C,OAAO,uJAAY,CAAC,IAAI,CAAC;gBACvB,UAAU;gBACV,QAAQ,EAAE;YACZ,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,wCAAwC;QACxC,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,OAAO,uJAAY,CAAC,IAAI,CAAC;gBACvB,UAAU;gBACV,QAAQ,EAAE;YACZ,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,kCAAkC;QAClC,MAAM,cAAc;YAAC;YAAU;YAAe;YAAe;YAAS;SAAgB;QACtF,MAAM,kBAAkB,QAAQ,GAAG,CAAC,YAAY,IAAI;QAEpD,IAAI,CAAC,YAAY,QAAQ,CAAC,kBAAkB;YAC1C,QAAQ,IAAI,CAAC,CAAC,2BAA2B,EAAE,gBAAgB,8DAA8D,CAAC;QAC5H;QAEA,iEAAiE;QACjE,MAAM,QAAQ,IAAI,yIAAe;QACjC,MAAM,SAAS,MAAM,MAAM,YAAY,CAAC,SAAS,uBAAuB,EAAE;QAE1E,OAAO,uJAAY,CAAC,IAAI,CAAC;YACvB,UAAU,OAAO,OAAO;YACxB,QAAQ,OAAO,MAAM;QACvB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,uJAAY,CAAC,IAAI,CAAC;YACvB,UAAU;YACV,QAAQ,EAAE;QACZ,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}